import{system as t,world as e}from"@minecraft/server";import s from"./lz-string";import{DynamicPropertyDatabase as r}from"./dynamicPropertyDb";import*as a from"@minecraft/server";import{prismarineDb as i}from"./lib/@trash/PrismarineDB/prismarine-db";function l(t,e){for(var s in e)try{e[s].constructor==Object?t[s]=l(t[s],e[s]):t[s]=e[s]}catch(r){t[s]=e[s]}return t}let o=new Map;i.table("Legacy-Scoreboard-DB");export class ScoreboardDatabase{constructor(t,s=!1){this.compressed=s,this.table=t;try{e.scoreboard.addObjective(`db-${t}`,`TABLE: ${t}`)}catch{}}getCache(){return o.has(this.table)?o.get(this.table):new Map}setCache(t){o.set(this.table,t)}set(t,r){let a=r,i=t;this.tableVars;"object"==typeof r?a=`OBJECT:${JSON.stringify(r)}`:"number"==typeof r?a=`NUMBER:${r.toString()}`:"boolean"==typeof r&&(a="BOOL:"+(r?1:0)),this.compressed&&(a=s.compress(a));e.getDimension("overworld");let l=e.scoreboard.getObjective(`db-${this.table}`);l.setScore(`${i}-L`,a.length);for(let t=0;t<a.length;t++)l.setScore(`${i}-${t}`,a[t].charCodeAt());let o=this.getCache();o.set(i,r),this.setCache(o)}get(t,r=""){let a=this.getCache();if(a.has(t))return a.get(t);try{let a=e.scoreboard.getObjective(`db-${this.table}`),i=a.getParticipants();if(!i.length)return r;let l=i.find((e=>e.displayName==`${t}-L`));if(!l)return r;let o=a.getScore(l),h=i.filter((e=>e.displayName.startsWith(`${t}-`)&&!e.displayName.endsWith("L"))).sort(((e,s)=>parseInt(e.displayName.substring(`${t}-`.length)-parseInt(s.displayName.substring(`${t}-`.length))))).filter((e=>parseInt(e.displayName.substring(`${t}-`.length))<o)),n="";for(const t of h)n+=String.fromCharCode(a.getScore(t));if(!n||!n.length||""==n)return r;if(!n.length)return r;this.compressed&&(n=s.decompress());let c=n.startsWith("OBJECT:")?JSON.parse(n.substring(7)):n.startsWith("NUMBER:")?parseInt(n.substring(4)):"BOOL:true"==n||"BOOL:false"!=n&&n,g=this.getCache();return g.set(t,c),this.setCache(g),c}catch(t){return r}}getNoCheck(t){let s=e.scoreboard.getObjective(`db-${this.table}`),r=s.getParticipants();if(!r.length)return defaultResult;let a=r.find((e=>e.displayName==`${t}-L`));if(!a)return defaultResult;s.getScore(a);let i=r.filter((e=>e.displayName.startsWith(`${t}-`)&&!e.displayName.endsWith("L"))).sort(((e,s)=>parseInt(e.displayName.substring(`${t}-`.length)-parseInt(s.displayName.substring(`${t}-`.length))))),l="";for(const t of i)l+=String.fromCharCode(s.getScore(t));return l}hardSet(t,e){this.hardDelete(t),this.set(t,e)}keys(){try{return e.scoreboard.getObjective(`db-${this.table}`).getParticipants().filter((t=>t.displayName.endsWith("-L"))).map((t=>t.displayName.slice(0,-2)))}catch{return[]}}delete(t){let s=this.getCache();s.has(t)&&s.delete(t),this.setCache(s);let r=e.scoreboard.getObjective(`db-${this.table}`),a=r.getParticipants().find((e=>e.displayName==`${t}-L`));a&&r.removeParticipant(a)}hardDelete(t){let s=this.getCache();s.has(t)&&s.delete(t),this.setCache(s);let r=e.scoreboard.getObjective(`db-${this.table}`),a=r.getParticipants().filter((e=>e.displayName.startsWith(`${t}-`)));if(a.length)for(const t of a)r.removeParticipant(t)}getTable(){let t={};for(const e of this.keys())t[e]=this.get(e);return t}getTableWithoutChecks(){let t={};for(const e of this.keys())t[e]=this.getNoCheck(e);return t}setMany(t){for(const e of Object.keys(t)){let s=t[e];this.set(e,s)}}getMany(t){let e={};for(const s of t)e[s]=this.get(s,null);return e}deleteMany(t){for(const e of t)this.delete(e)}get allData(){return this.getTable()}set tableInfo(t){this.set("TABLE_INFO",t)}get tableInfo(){return this.get("TABLE_INFO")}get gkeys(){return this.keys()}get vals(){let t=[];for(const e of this.gkeys)t.push(this.get(e));return t}filter(t){return this.vals.filter(t)}find(t){return this.vals.find(t)}reduce(t){return this.vals.reduce(t)}forEach(t){return this.vals.forEach(t)}map(t){return this.vals.map(t)}set allData(t){this.setMany(t)}edit(t,e){let s=this.get(t);if("object"!=typeof s||Array.isArray(s))this.set(t,e);else{let r=l(s,e);this.set(t,r)}}set tableVars(t){this.edit("table_variables",t)}get tableVars(){return this.get("table_variables",{})}}export const Database=ScoreboardDatabase;export class DatabaseNew{constructor(t){this.table=t.toLowerCase()}set(t,s){let r=s;"object"==typeof s&&(r=`[OBJ:${JSON.stringify(s)}`),e.setDynamicProperty(`${this.table}:${t}`,r)}get(t,s=""){try{let r=e.getDynamicProperty(`${this.table}:${t}`);return r.startsWith("[OBJ:")?JSON.parse(r.substring(5)):r||s}catch{return this.delete(t),s}}keys(){return e.getDynamicPropertyIds().filter((t=>t.startsWith(this.table))).map((t=>t.substring(this.table.length+1)))}delete(t){try{e.setDynamicProperty(`${this.table}:${t}`,void 0)}catch{}}hardDelete(t){this.delete(t)}clear(){for(const t of this.keys())this.delete(t)}hardSet(t,e){this.set(t,e)}getTable(){let t={};for(const e of this.keys())t[e]=this.get(e);return t}get allData(){return this.getTable()}set tableInfo(t){this.set("TABLE_INFO",t)}get tableInfo(){return this.get("TABLE_INFO")}get gkeys(){return this.keys()}get vals(){let t=[];for(const e of this.gkeys)t.push(this.get(e));return t}}export const DatabaseLegacy=Database;