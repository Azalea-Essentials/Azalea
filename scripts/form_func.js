import{Player as t,world as r}from"@minecraft/server";import{ActionFormData as n,ActionFormResponse as a,FormCancelationReason as o,MessageFormData as e,MessageFormResponse as s,ModalFormData as c,ModalFormResponse as l}from"@minecraft/server-ui";export const content={warn(...t){},chatFormat(...t){r.say(t.map((t=>JSON.stringify(t,((t,r)=>r instanceof Function?r.toString().replaceAll("\r\n","\n"):r),4))).join(" "))}};function f(t){return!1!==t&&null!=t&&NaN!==t&&t!==1/0}export class MessageForm{constructor(){this.form=new e,this.callbacks=[null,null]}title(t){if("string"!=typeof t)throw new Error(`titleText: ${t}, at params[0] is not a String!`);return this.form.title(t),this}body(t){if("string"!=typeof t)throw new Error(`bodyText: ${titleText}, at params[0] is not a String!`);return this.form.body(t),this}button1(t,r){if("string"!=typeof t)throw new Error(`text: ${label}, at params[0] is not a String!`);if(r&&!(r instanceof Function))throw new Error("callback at params[1] is defined and is not a Function!");return this.callbacks[1]=r,this.form.button1(t),this}button2(t,r){if("string"!=typeof t)throw new Error(`text: ${label}, at params[0] is not a String!`);if(r&&!(r instanceof Function))throw new Error("callback at params[1] is defined and is not a Function!");return this.callbacks[0]=r,this.form.button2(t),this}async show(r,n=!1,a){try{if(r instanceof t||(r=r?.player),!(r instanceof t))throw new Error("player at params[0] is not a Player!");if(n&&"boolean"!=typeof n)throw new Error("awaitNotBusy at params[1] is not a Boolean!");if(a&&!(a instanceof Function))throw new Error("callback at params[2] is not a Function!");let o;for(;;){o=await this.form.show(r);const{cancelationReason:t}=o;if(!n||"userBusy"!==t)break}const{selection:i}=o,e=this.callbacks[i];return e instanceof Function&&e(r,i),a instanceof Function&&a(r,o),o}catch(t){console.log(t,t.stack)}}}export class ActionForm{constructor(){this.form=new n,this.callbacks=[],this.titleText=""}title(t){if("string"!=typeof t)throw new Error(`titleText: ${t}, at params[0] is not a String!`);return this.titleText=`§r${t}`,this.form.title(t),this}body(t){if("string"!=typeof t)throw new Error(`bodyText: ${titleText}, at params[0] is not a String!`);return this.form.body(t),this}button(t,r,n){if("string"!=typeof t)throw new Error(`text: ${label}, at params[0] is not a String!`);if(r&&"string"!=typeof r)throw new Error(`iconPath: ${defaultValue}, at params[1] is defined and is not a String!`);if(n&&!(n instanceof Function))throw new Error("callback at params[2] is defined and is not a Function!");return this.callbacks.push(n),this.form.button(t,r),this}async show(r,n=!1,a){r.hasTag("light-mode")&&this.title(`§l§i§g§h§t§r§8${this.titleText.replace(/§r/g,"§r§8")}`);try{if(r instanceof t||(r=r?.player),!(r instanceof t))throw new Error("player at params[0] is not a Player!");if(a&&!(a instanceof Function))throw new Error("callback at params[2] is not a Function!");let n;for(;;){n=await this.form.show(r);const{cancelationReason:t}=n;if("userBusy"!==t)break}const{selection:o}=n,i=this.callbacks[o];return i instanceof Function&&i(r,o),a instanceof Function&&a(r,n),n}catch(t){console.log(t,t.stack)}}}export class ModalForm{constructor(){this.form=new c,this.callbacks=[],this.titleText=""}submitButton(t){this.form.submitButton(t)}title(t){if("string"!=typeof t)throw new Error(`titleText: ${t}, at params[0] is not a String!`);return this.titleText=t,this.form.title(t),this}toggle(t,r,n){if("string"!=typeof t)throw new Error(`label: ${t}, at params[0] is not a String!`);if(r&&"boolean"!=typeof r)throw new Error(`defaultValue: ${r}, at params[1] is defined and is not a String!`);if(n&&!(n instanceof Function))throw new Error("callback at params[2] is defined and is not a Function!");return this.callbacks.push(n),this.form.toggle(t,r),this}dropdown(t,r,n=0,a){if("string"!=typeof t)throw new Error(`label: ${t}, at params[0] is not a String!`);if(!(r instanceof Array))throw new Error("params[1] is not an Array!");r.forEach(((t,r)=>{if(!(t instanceof Object))throw new Error(`index: ${r}, in params[1] is not an Object!`)}));const o=r.map((({option:t},r)=>{if("string"!=typeof t)throw new Error(`property option: ${t}, at index: ${r}, in params[1] is not a String!`);return t})),e=r.map((({callback:t})=>{if(t&&!(t instanceof Function))throw new Error(`property callback at index: ${i}, in params[1] is not a Function!`);if(t)return t}));if(!f(n)&&!Number.isInteger(n))throw new Error(`defaultValueIndex: ${n}, at params[2] is defined and is not an Integer!`);if(a&&!(a instanceof Function))throw new Error("callback at params[3] is defined and is not a Function!");return this.callbacks.push([e,a]),this.form.dropdown(t,o,n),this}slider(t,r,n,a,o=null,i){if("string"!=typeof t)throw new Error(`label: ${t}, at params[0] is not a String!`);if("number"!=typeof r)throw new Error(`minimumValue: ${r}, at params[1] is not a Number!`);if("number"!=typeof n)throw new Error(`maximumValue: ${n}, at params[2] is not a Number!`);if("number"!=typeof a)throw new Error(`valueStep: ${a}, at params[3] is not a Number!`);if(!f(o)&&"number"!=typeof o)throw new Error(`defaultValue: ${o}, at params[4] is defined and is not a Number!`);if(i&&!(i instanceof Function))throw new Error("callback at params[5] is defined and is not a Function!");return this.callbacks.push(i),this.form.slider(t,r,n,a,o),this}textField(t,r,n=null,a){if("string"!=typeof t)throw new Error(`label: ${t}, at params[0] is not a String!`);if("string"!=typeof r)throw new Error(`placeholderText: ${r}, at params[1] is not a String!`);if(n&&"string"!=typeof n)throw new Error(`defaultValue: ${n}, at params[2] is defined and is not a String!`);if(a&&!(a instanceof Function))throw new Error("callback at params[3] is defined and is not a Function!");return this.callbacks.push(a),this.form.textField(t,r,n),this}async show(r,n=!1,a){r.hasTag("light-mode")&&this.title(`§l§i§g§h§t§r§8${this.titleText.replace(/§r/g,"§r§8")}`);try{if(r instanceof t||(r=r?.player),!(r instanceof t))throw new Error("player at params[0] is not a Player!");if(n&&"boolean"!=typeof n)throw new Error("awaitNotBusy at params[1] is not a Boolean!");if(a&&!(a instanceof Function))throw new Error("callback at params[2] is not a Function!");let i;for(;;){i=await this.form.show(r);const{cancelationReason:t}=i;if(!n||t!==o.UserBusy)break}const{formValues:e,cancelationReason:s}=i;return s!==o.UserClosed&&s!==o.UserBusy&&i.formValues.forEach(((t,n)=>{if(this.callbacks[n]instanceof Array){const a=this.callbacks[n][0],o=this.callbacks[n][1];a instanceof Function&&a(r,n),o instanceof Function&&o(r,t,n)}else{const a=this.callbacks[n];a instanceof Function&&a(r,t,n)}})),a instanceof Function&&a(r,i),i}catch(t){console.warn(t,t.stack)}}}